/// Event wrapper
/// @author Harry Roberts
/// @param $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}



/// Set a max width and center, starting at a set breakpoint and up, match max-width to each larger breakpoint
/// @author Jon Clark
/// @param $bp [$xsmall-up] - The media query at which containment begins
/// @param $strict [false] - If true, containment will not bubble up to larger breakpoints
@mixin contained($bp: $xsmall-up, $strict: false) {
  @include scut-margin(n auto);

  @if $bp == $xsmall-up {
    @media #{$xsmall-up} {
      max-width: $mq-xsmall - $gutter*2;
    }
  }

  @if ($bp == $xsmall-up and not $strict) or $bp == $small-up {
    @media #{$small-up} {
      max-width: $mq-small - $gutter*2;
    }
  }

  @if ($bp == $xsmall-up and not $strict) or ($bp == $small-up and not $strict) or $bp == $medium-up {
    @media #{$medium-up} {
      max-width: $mq-medium - $gutter*2;
    }
  }

  @if ($bp == $xsmall-up and not $strict) or ($bp == $small-up and not $strict) or ($bp == $medium-up and not $strict) or $bp == $large-up {
    @media #{$large-up} {
      max-width: $mq-large - $gutter*2;
    }
  }
}



/// Transition, using sitewide variables
/// @author Jon Clark
/// @param $property - the css property to transition
/// @param $duration [$transition-duration: .25s]
/// @param $timing [$transition-timing-function: ease-in-out]
$transition-duration: .25s !default;
$transition-timing-function: 'ease-in-out' !default;
@mixin transition($property, $duration: $transition-duration, $timing: $transition-timing-function) {
  transition-property: $property;
  transition-duration: $duration;
  transition-timing-function: $timing;
}



/// Distribute items
/// @author Hugo Giraudel
/// @edits Jon Clark (added params)
/// @param $el [div] - selector of immediate child elements to distribute
/// @param $gutter [$gutter: 16px] - space between distributed items
/// @param $max-loops [12] - Set number of distributed elements to accommodate
///                         (a lower number will save on CSS output)
/// @link http://stackoverflow.com/a/14960256/174384
$gutter: 16px !default;
@mixin distribute($el: div, $gutter: $gutter, $max-loops: 12) {
  @include make-row($gutter);
  @for $i from 1 through $max-loops {
    > #{$el} {
      &:first-child:nth-last-child(#{$i}),
      &:first-child:nth-last-child(#{$i}) ~ #{$el} {
          width: (100%/$i);
          float: left;
          padding-right: $gutter*.5;
          padding-left: $gutter*.5;
      }
    }
  }
}
